import os
import numpy as np
import pandas as pd
from tqdm import tqdm
import configargparse

'''
This script is used to process CAQTL data and obtain a negative dataset based on the CAQTL data
The input 1000 person genome data is a 1kgp_maF>0.01.csv file generated by handle_1kgp.py
CaQTL input: raw data downloaded from the website and converted into CSV files
Output of caQTL: The negative CSV file corresponding to the positive result is saved in the same directory as the input CSV file
'''


def make_parser():
    parser = configargparse.ArgParser(description="Preprocessing eqtl data")
    parser.add_argument('--caqtl', type=str, default='/mnt/data0/users/lisg/Data/caqtl/allelic_effect_results.csv',
                        help='eqtl data path, must have File name. e.g.:/path/xx.csv')
    parser.add_argument('--kgp_data', type=str, default='/mnt/data0/users/lisg/Data/1kgp/1kgp_MAF>0.01.csv',
                        help='1kgp data(filter coding and MAF>0.01 , must have File name.'
                        'e.g.:/mnt/data0/users/lisg/Data/1kgp/1kgp_MAF>0.01.csv')
    return parser


def main():
    parser = make_parser()
    args = parser.parse_args()
    seed = 10
    np.random.seed(seed)
    kgp_df = pd.read_csv(args.kgp_data)
    np.random.seed(seed)
    caqtl_df = pd.read_csv(args.caqtl)

    # ['variant_id', 'chr', 'variant_pos', 'ref', 'alt', 'rs_id_dbSNP151_GRCh38p7', 'maf']


    caqtl_df = caqtl_df[caqtl_df['fdr'] != 'na']
    caqtl_df['df.test'] = caqtl_df['df.test'].astype(int)
    caqtl_df = caqtl_df[caqtl_df['df.test'] != 0]
    caqtl_df['fdr'] = caqtl_df['fdr'].astype(float)
    caqtl_df = caqtl_df[caqtl_df['fdr'] < 0.1]

    caqtl_df[['rsid_all', 'pos_all']] = caqtl_df['variant_id'].str.split('::', expand=True)

    caqtl_df = caqtl_df[~caqtl_df['variant_id'].str.match(r'^p2_')]
    duplicates = caqtl_df[caqtl_df.duplicated('pos_all', keep=False)]
    duplicates = duplicates.sort_values(by='pos_all')
    indexes_to_drop = duplicates.index
    caqtl_df = caqtl_df.drop(indexes_to_drop)
    caqtl_df = caqtl_df[~caqtl_df['variant_id'].str.match(r'^n1_')]
    caqtl_df = caqtl_df[~caqtl_df['variant_id'].str.match(r'^n2_')]
    caqtl_df = caqtl_df.reset_index(drop=True)

    def extract_values(row):
        parts = row['rsid_all'].split('_')
        rsid = parts[1]
        ref = parts[2]
        alt = parts[3]
        return pd.Series([rsid, ref, alt])

    caqtl_df[['rsid', 'ref', 'alt']] = caqtl_df.apply(extract_values, axis=1)

    def extract_values2(row):
        parts = row['pos_all'].split(':')
        chr_value = parts[0]
        start_pos = int(parts[1].split('-')[0])
        new_pos = start_pos + 135
        return pd.Series([chr_value, new_pos])

    caqtl_df[['chr', 'variant_pos']] = caqtl_df.apply(extract_values2, axis=1)
    '''=======================阴性子集部分=============================='''

    bins = [0, 0.025, 0.05, 0.10, 0.15, 0.20, 0.25, 0.30, 0.35, 0.40, 0.45, 0.50]
    labels = ['(0-0.025]', '(0.025-0.05]', '(0.05-0.10]', '(0.10-0.15]', '(0.15-0.20]', '(0.20-0.25]',
              '(0.25-0.30]', '(0.30-0.35]', '(0.35-0.40]', '(0.40-0.45]', '(0.45-0.50]']

    kgp_df['maf_group'] = pd.cut(kgp_df['AF_adjust'], bins=bins, labels=labels, right=True)


    subset_ratio = [0.008]  # [1, 0.2, 0.008]
    max_distance = [150000]   # [2000, 8000, 150000]
    target_folder = os.path.dirname(args.caqtl)  

    caqtl_df.to_csv('%s/positive.csv' % target_folder, index=False)

    for ratio, max_distance in zip(subset_ratio, max_distance):
       
        subset_size = int(len(kgp_df) * ratio)
        subset_list = []

        for group in labels:
            group_df = kgp_df[kgp_df['maf_group'] == group]
            group_size = int(subset_size * (1 / len(labels)))  #

            if len(group_df) >= group_size:
     
                sampled_group = group_df.sample(n=group_size, replace=False, random_state=seed)
            else:

        
                sampled_group = pd.concat(
                    [group_df, group_df.sample(n=group_size - len(group_df), replace=True, random_state=seed)],
                    ignore_index=True)

            subset_list.append(sampled_group)


        subset = pd.concat(subset_list, ignore_index=True)

        if len(subset) > subset_size:
            
            subset = subset.sample(n=subset_size, replace=False, random_state=seed)
        elif len(subset) < subset_size:

            additional = kgp_df.sample(n=subset_size - len(subset), replace=False, random_state=seed)
            subset = pd.concat([subset, additional], ignore_index=True)





        subset = subset.sample(frac=1, random_state=seed).reset_index(drop=True)


        '''==============================================================='''

        result_df = pd.DataFrame(columns=['Chr', 'pos', 'ref', 'alt', 'AF', 'AF_adjust', 'maf_group'])
        a, b, c, d = 0, 0, 0, 0
        for i in tqdm(range(caqtl_df.shape[0])):
            row = caqtl_df.iloc[i]
            chr_value = row['chr']
            pos_value = row['variant_pos']
            ref_value = row['ref']
            alt_value = row['alt']

            filtered_subset = subset[subset['Chr'] == chr_value]

            if not filtered_subset.empty:

                distances = (filtered_subset['pos'] - pos_value).abs()

                filtered_subset = filtered_subset.assign(distance=distances)
                nearest_subset = filtered_subset[filtered_subset['distance'] <= max_distance].sort_values(
                    by='distance').head(1)

                if not nearest_subset.empty:  
                    valid_nearest_B = None
                    for _, nearest_row in nearest_subset.iterrows():
                        if not (nearest_row['Chr'] == chr_value and nearest_row['pos'] == pos_value and
                                nearest_row['ref'] == ref_value and nearest_row['alt'] == alt_value):
                            valid_nearest_B = nearest_row
                            break
                    if valid_nearest_B is not None: 
                        d = d + 1
                        new_row = pd.DataFrame(
                            [valid_nearest_B[['Chr', 'pos', 'ref', 'alt', 'AF', 'AF_adjust']]])
                    else:  
                        a = a + 1
                        new_row = pd.DataFrame([{
                            'Chr': np.nan, 'pos': np.nan, 'ref': np.nan, 'alt': np.nan,
                            'AF': np.nan, 'AF_adjust': np.nan}])
                else:  
                    b = b + 1
                    new_row = pd.DataFrame([{
                        'Chr': np.nan, 'pos': np.nan, 'ref': np.nan, 'alt': np.nan,
                        'AF': np.nan, 'AF_adjust': np.nan,}])
            else:  
                c = c + 1
                new_row = pd.DataFrame([{
                    'Chr': np.nan, 'pos': np.nan, 'ref': np.nan, 'alt': np.nan,
                    'AF': np.nan, 'AF_adjust': np.nan}])

            result_df = pd.concat([result_df, new_row], ignore_index=True)
        print('Meet the requirement of having the same number of negative and positive samples within the specified distance：', a)
        print(f'The number of negative SNPs that do not meet the specified {max_destance} distance:', b)
        print('Positive chromosomes, number of samples without corresponding chromosomes in the negative subset:', c)
        print('The number of negative SNPs that meet the requirements:', d)
        result_df.to_csv(f'%s/negative{ratio}.csv' % target_folder, index=False)

def select_subset(kgp_df):

    total_rows = kgp_df.shape[0]

    subset_size = int(total_rows * 0.008)

    sample_indices = np.random.choice(total_rows, size=subset_size, replace=False)
    sampled_df = kgp_df.iloc[sample_indices]
    return sampled_df




if __name__ == "__main__":
    main()
